/* body { Selecciona todo el body
    color: green;
} */

@import url('https://fonts.googleapis.com/css2?family=Whisper&display=swap');

h1 {
    /*Selecciona todos los h1 del documento*/
    color: red;
    font-style: italic;
}

#titulo {
    /*Selecciona el elemento con id "titulo"*/
    color: green;
}

p {
    /*Selecciona todos los p*/
    color: blue;
}

p.texto {
    /*Selecciona los elementos p que tengan la clase "texto"*/
    color: crimson;
}

p.otraClase {
    /*Selecciona los elementos p que tengan la clase "otraClase"*/
    color: mediumslateblue
}

/*Acá vemos que el color este violeta se aplicó a los dos parrafos que
tienen la clase "otraClase", es decir, importa mucho el orden en que 
escribimos CSS, igual que con HTML. En lineas generales lo que escribamos al final tiene
prioridad sobre lo anterior*/

/*Si volvemos al html vemos este div que contiene este p h2 y h3, vamos
a hacer que se aplique estilo solo a lo que hay dentro del div*/

div p {
    /*Selecciona los p que esten dentro de un div, es decir que sean 
    hijos*/
    color: aquamarine;
}

div h2 {
    /*Selecciona los h2 que esten dentro de un div, es decir que sean 
    hijos*/
    color: brown;
}

div h2,
div h3 {
    /*Selecciona h2 y h3 que esten dentro de un div, es decir que sean 
    hijos*/
    color: chartreuse;
}


/*Propiedad COLOR*/
.color {
    /*Como vimos la propiedad color aplica color a la funete nuestros 
    elementos*/
    /* color: red;      Cualquiera de estas formas hace lo mismo 
    color: #f00;        El primer digito selecciona el rojo, el segundo 
                        el verde, y el tercero el azul
                        Cuanto mas cerca de la f mas blanco es, para 
                        crear grises los 3 valores deben ser iguales   
    color: #ff0000;     Esto puede entenderse como que el primer digito 
                        del primer par indica el valor entero y el
                        segundo el decimal.

    color: rgb(255,0,0);    Se utilizan valores desde 0 a 255
    */

    color: #bbb;

}

/*Propiedad BORDER que le asigna un borde a los elementos html*/

.border {
    /*Primero demosle un poco de estilo al subtitulo*/
    width: 350px;

    /*Desde acá las porpiedades para el borde*/
    /* border: 5px red outset; -> Primero se indica el grosor del borde, 
    luego el color, por ultimo el tipo de borde*/
    border-width: 10px;
    border-color: red;
    border-style: outset;
    /*groove, ridge, inset, outset dan efecto tridimensional*/
    /*Proipiedad para redondear las esquinas*/
    border-radius: 15px;
}

/*Estuvimos metiendo valores a las propiedades, veamos entonces las 
medidas*/
.medidasAbsolutas,
.medidasRelativas_1,
.medidasRelativas_2 {
    width: 350px;
}

.medidasAbsolutas {
    /*Medida fija, no cambia*/
    border: 10px blue solid;
    /*
    cm centimetros
    mm milimetros
    in pulgadas
    pt 
    pc 
    
    Estas medidas no son recomendadas porque como dice su nombre son 
    absolutas, fijas. No cambian.
    */
}

/*Medidas relativas mas comunes */
.medidasRelativas_1 {
    /*Relacionada con el tamaño de la fuente que está utilizando la 
    etiqueta*/
    font-size: 30px;
    border: 2em tomato solid;
}

.medidasRelativas_2 {
    font-size: 10px;
    border: 2em tomato solid;
}

.medidasRelativas_3 {
    /*Relacionda con el tamaño de la fuente de la etiqueta raiz html*/
    font-size: 50px;
    /*Por mas que yo cambie el tamaño de la fuente, el valor es relativo 
    al tamaño de la etiqueta raiz*/
    border: 1rem green solid;
}

/*Propiedad Background*/

#fondo {
    /* background-color: rgba(255, 0, 0,1); El "a" indica la transparencia del fondo.
    Existe la propiedad opacity con la que se puede establecer la opacidad (transparencia) del
    fondo, pero aplica al elemento completo, no solo al fondo.
    */

    height: 400px;
    /* background-image: url(../img/logo_vsc.png);
    background-size: 300px;
    background-repeat: no-repeat;
    background-position: center; */

    /*Tambien se pueden establecer todos los valores en una sola propiedad, salvo el height*/
    background: #f00 url(../img/logo_vsc.png) no-repeat center center/200px;
    /*el primer center centra en forma horizontal, el segundo en vertical, luego el tamaño de la imagen que va precedido por una "/" */
}

/*Propiedad Margin*/

.margen {
    background-color: greenyellow;
    margin: 50px 20px 10px 50px;
    /*Arriba, derecha, abajo, izquierda*/
    /*Se pueden utilizar 3 valores que corresponden a arriba, ambos costados, abajo. Por ejemplo: margin: 50px 20px 10px; */
    /*Se pueden utiliar 2 valores que corresponden a los margenes verticales y horizontales, en ese orden.*/
    /*Se puede utilizar 1 valor que corresponde a los 4 lados*/
    /*El padding agrega un espacio desde el borde hacia el interior del elemento. Se comporta igual que el margin*/
    padding: 30px 15px 20px 10px;
    border: solid 2px black;
    height: 100px;
    width: 50px;
    overflow: scroll;
    /*Por defecto viene visible, que lo ahce visible. Se puede establecer hidden, que va a ocultar
    todo el contenido que "sobresale" del elemento (ojo, lo oculta, no lo borra).
    Tambien se puede utilizar el scroll que coloca las barritas que nos permiten recorrer el elemento.*/

    /*Todo lo que vimos hasta acá del margin, paddin, etc. conforma lo que se denomina "boxmodel" o "modelo de cajas"
    de CSS, boxmodel es como se posiciona nuestro elemendo dentro del docuemnto html. Boxmodel aplica a absolutamente
    todos los elementos del documento html, incluso a los que no tienen ningun estilo definido.*/

    /*Cuando asignamos un width, estamos asignando el ancho que va a tener el contenido de nuestra etiqueta, es decir, no tiene en cuenta
    el padding, el border ni el margin. Entonces si queremos calcular el ancho total de nuestro elemento debemos sumar todos los valores.
    Por ejemplo: width + 2*padding + 2*border*
    */

    /*Existe la propiedad outline que es un contorno que se coloca por fuera del borde y antes del
    margin. Se configura igual que el border
    */
    outline: 1px red solid;

}

/*Propiedades de texto*/

.textProp_1 {
    text-align: center;
    /*Text-align sirve para ubicar el texto en el elemento, centrado, a la izquierda, a la derecha
    o justificado. Tal como en el word.*/
}

.textProp_2 {
    color: #f00;
    text-align: justify;
    text-decoration: underline;
    text-shadow: 5px 3px 5px black;
    /*El primer valor corresponde a la derecha, el segundo a abajo, el tercero el blur.*/

    /* font-family: Verdana, Geneva, Tahoma, sans-serif; */
    font-family: "Whisper", cursive;
    /*Con CSS podemos importar funtes externas, por ejemplo desde google fonts.
    El import está en la línea 5 de este código.*/
}

/*Propiedades de los links*/
#anchor {
    text-decoration: none;
    /*Se pueden aplicar las propiedades de texto*/
}

/* Los links pueden tener cuatro estados:
1. link: Es el estado por defecto, cuando el usuario no ha hecho clic en él.
2. visited: Es el estado cuando el usuario ha hecho clic en él.
3. hover: Es el estado cuando el usuario pasa el cursor por encima de él.
4. active: Es el estado cuando el usuario hace clic en él y mantiene el clic.
Para que funcionen deben estar en ese orden en el código. Puede faltar alguno
pero el orden debe mantenerse.
Los estados se establecen a través de pseudoclases.
*/

a:link {
    color: brown
}

a:visited {
    color: green
}

a:hover {
    color: blue;
    font-size: 10px;
}

a:active {
    color: red;
    font-size: 30px;
}

/*A todos los estados se le pueden agragar las propiedades que estuvimos viendo.*/

/*Propiedades de las tablas*/
table {
    width: 100%;
    border-collapse: collapse;
    /*border-collapse establece el comportamiento del borde.*/
}

th,
td {
    border: solid 1px #666;
    padding: 5px;
}

th {
    background-color: brown;
    color: white;
}

tr:nth-child(even) {
    /*Si este selector con una pseudoclase se agrega después del hover, va a dejar de funcionar para las filas impares.
    Para que funcione en todas hay que colocarlo antes de tr:hover{}*/

    /*nth-child es una pseudoclase que sirve para seleccionar hijos de la clase, que tengan determinada caracterísitca,
    en este caso odd y even.*/
    background-color: yellow
}

tr:hover {
    /*La pseudoclase hover modifica el comportamiento del elemento cuando el mouse pasa por encima
    de él*/
    background-color: #555;
    color: white;
    cursor: pointer;
}

/* Propiedades de DISPLAY */

.div_1 {
 background-color: chocolate;   
}

.div_2 {
    background-color: yellow;
}

.span_1 {
    background-color: aqua;
}

.span_2 {
    background-color: blueviolet;
}

/*Como se ve, los div ocupan todo el ancho de la pantalla, los span 
solo ocupan el espacio que ocupe el texto, podemos modificar eso*/

.inline {
    /* a los elementos con clase inline le asignamos un display: inline
    a este display no se le pueden asignar propiedades width y height
    ni tampoco margenes verticales*/
    display: inline;
    
}

.block {
    /* a los elementos con clase block le asignamos un display: block
    este display muestra los elementos en líneas independientes, se le
    puede asignar width, height y márgenes verticales*/
    display: block;
    visibility: visible;
}

.span_3 {
    display: block;
    background-color: red;
    color: white;
    max-width: 300px; /*Se le puede asignar un ancho máximo*/
}

.inline-block {
    /*La propiedad inline-block tiene un comportamiento que mezcla
    características de las anteriores, muestra los elementos en la misma
    linea y se le puede asignar la propiedad de width, height y márgenes
    verticales*/
    display: inline-block;
    background-color: #555;
    height: 30px;
    width: 500px;
    margin-top: 10px;
    text-align: center;
}


/* Propiedad POSITION */
#position {
    color: blue;
    left: 20px;/*indica la distancia que se tiene que mover desde la izquierda*/
    top:25px;/*indica la distancia que se tiene que mover desde arriba */
    position: sticky;
    /*  static: es el que viene por defecto en todos los elementos html
        relative: es una posicion relativa con respecto a donde debería
        estar posicionado el elemento. Puede superponerse con otros
        elementos.
        fixed: indica la posicion relativa con respecto a lo que estamos
        viendo en la pantalla y se desplaza si scroleamos.
        absolute: indica la posicion relativa pero con respecto al 
        elemento padre mas cercano que tenga, si no tiene padre se 
        relaciona con el body, no se desplaza si scroleamos.
        sticky: Es una mezcla entre relative y fixed
        */
}

/* Propiedad FLOAT, esta propiedad hace "flotar" dentro de un elemento,
los posiciona */

.float {
    height: 300px;
}

.left {
    float: left;
}

.img-left {
    height: 250px;
}

.right {
    float: right;
    width: 200px;
    text-align: justify;
}

#p-float {
    color: coral;
}

#p-float::first-letter {
    color: red;
    font-size: 2rem;
}

/* Propiedad CENTER */

.center {
    /*Siempre hay que asignarle un ancho*/
    width: 400px;   
    margin: 0% auto;
    background-color: tomato;
    text-align: center;
    padding: 10px 0px; 
}

#p-centrado::before {
    content: "👉";
}

#p-centrado::after {
    content: "👈";
}

nav {
    display: flex;/* A grandes rasgos flex hace que las cajas que contiene se
    comporten como celdas de tablas, por lo que podemos adaptar su comportamiento
    le da flexibilidad a los elementos para alterar su tamaño y distribuir el
    espacio entre ellos*/
    align-items: center;
    justify-content: space-between;
    padding-left: 5%;
    padding-right: 5%;
}

#h3Navbar {
    background-color: aquamarine;
    color: violet;
    font-size: 30px;
}

li {
    display: inline-block;
    padding: 0% 15px;
}

/* Animaciones */

#animacion {
    background-color: forestgreen;
    width: 50px;
    height: 50px;
    margin: auto;
    animation: redondeo 3s 1s infinite;
            /* nombre, timepo que dura cada etapa, demora para empezar, modo*/
}

@keyframes redondeo {
    /*Es la propiedad CSS que nos permite crear la animacion,
    indico etapas y que quiero que haga en cada una*/
    0% {
        border-radius: 0 0 0 0;
        background-color: green;
        transform: rotate(0deg);
    }

    25% {
        border-radius: 50% 0 0 0;
        background-color: orange;
        transform: rotate(45deg);
    }

    50% {
        border-radius: 50% 50% 0 0;
        background-color: aqua;
        transform: rotate(90deg);
    }

    75% {
        border-radius: 50% 50% 50% 0;
        background-color: yellow;
        transform: rotate(135deg);
    }

    100% {
        border-radius: 50%;
        background-color: blueviolet;
        transform: rotate(180deg);
    }
}

/* Propiedad Transition */

#suelo {
    border-bottom: 30px chocolate solid;
    /* Si quisieramos, podriamos darle un ancho cualquiera 
    max-width: 600px;
    overflow: hidden; */
}

#macana {
    /* background-color: #555; */
    height: 6rem;
    width: 10rem;
    background-image: url(../img/macana.png);
    background-repeat: no-repeat;
    background-size: contain;
}

#suelo:hover #macana {
    margin-left: 100%;
    transition: linear 3s;
    /*ease: este es el valor por defecto. Tiene un comienzo lento,
    luego rápido y termina de nuevo lentamente.
    linear: la misma velocidad durante toda la duración de la transición.
    ease-in: efecto de transición con comienzo lento.
    ease-out: efecto de transición con comienzo rápido y final lento.
    ease-in-out: efecto de transición con comienzo y final lento;más rápido en medio. Equivalente a cubic-bezier(0.42,0,0.58,1).
    cubic-bezier(n,n,n,n): define tus propios valores para la curva de Bezier. Cada valor es entre 0 y 1.
    https://cubic-bezier.com/#.17,.67,.83,.67

    initial: establece esta propiedad a su valor por defecto.
    inherit: hereda esta propiedad del elemento padre.*/
}

/* GRID */

.grid_container {
    display: grid;
    width: 500px;
    height: 500px;
    margin: 10% auto;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows:  50% 50%;
    grid-template-areas:
    "area_1 area_2"
    "area_3 area_4"
}

#div_1 {
    grid-area: area_1;
    background-color: #f00;
    padding: 10%;
}

#div_2 {
    grid-area: area_2;
    background-color: green;
}

#div_3 {
    grid-area: area_3;
    background-color: blueviolet;
}

#div_4 {
    grid-area: area_4;
    background-color: pink;
    display: flex;
    justify-content: center;
    align-items: center;

}

#img_grid {
    width: 70%;
    height: 80%;
}

#btnVolver {
    display: block;
    background-color: antiquewhite;
    margin: 1rem auto;
    border: .15rem #aaa outset;
    border-radius: .25rem;
    width: 10rem;
    height: 2rem;
    cursor: pointer;

}

#btnVolver:hover {
    background-color: cadetblue;
    box-shadow: 0.1rem 0.2rem 0.25rem rgba(0, 0, 0, 0.5);
    transition: ease 0.7s;

}

#btnVolver:active {
    border: .15rem #aaa inset;
}

#btnVolver a {
    text-decoration: none;
}

#aBtn:active {
    color: #fff;
}















